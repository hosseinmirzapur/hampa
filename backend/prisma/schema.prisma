generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  phone                  String    @unique
  name                   String?
  email                  String?   @unique
  avatarUrl              String?
  bio                    String?
  hasSubscription        Boolean   @default(false) // New field
  subscriptionExpiryDate DateTime? // New field
  password               String? // Add password field
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  runnerCards          RunnerCard[]
  jointRunCreatedBy    JointRun[]            @relation("JointRunCreatedBy")
  jointRunParticipants JointRunParticipant[]
  notifications        Notification[]
}

model RunnerCard {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  title               String
  location            String
  days                String[]
  time                String
  phoneNumber         String
  isPhoneNumberPublic Boolean
  imageUrl            String?
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  jointRunParticipants JointRunParticipant[]
}

model JointRun {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  latitude    Float?
  longitude   Float?
  dateTime    DateTime
  createdById String
  createdBy   User     @relation("JointRunCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants JointRunParticipant[]
}

model JointRunParticipant {
  id           String      @id @default(cuid())
  jointRunId   String
  jointRun     JointRun    @relation(fields: [jointRunId], references: [id])
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  runnerCardId String?
  runnerCard   RunnerCard? @relation(fields: [runnerCardId], references: [id])
  status       String      @default("INTERESTED")
  joinedAt     DateTime    @default(now())

  @@unique([userId, jointRunId]) // Add this unique constraint
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  type              String
  message           String
  isRead            Boolean  @default(false)
  relatedEntityType String?
  relatedEntityId   String?
  createdAt         DateTime @default(now())
}
